var UPNG = {
  toRGBA8: function (a) {
    var c = a.width,
      b = a.height;
    if (null == a.tabs.acTL)
      return [UPNG.toRGBA8.decodeImage(a.data, c, b, a).buffer];
    var d = [];
    null == a.frames[0].data && (a.frames[0].data = a.data);
    for (
      var k = c * b * 4,
        e = new Uint8Array(k),
        h = new Uint8Array(k),
        f = new Uint8Array(k),
        m = 0;
      m < a.frames.length;
      m++
    ) {
      var g = a.frames[m],
        t = g.rect.x,
        n = g.rect.y,
        l = g.rect.width,
        p = g.rect.height,
        q = UPNG.toRGBA8.decodeImage(g.data, l, p, a);
      if (0 != m) for (var r = 0; r < k; r++) f[r] = e[r];
      0 == g.blend
        ? UPNG._copyTile(q, l, p, e, c, b, t, n, 0)
        : 1 == g.blend && UPNG._copyTile(q, l, p, e, c, b, t, n, 1);
      d.push(e.buffer.slice(0));
      if (0 != g.dispose)
        if (1 == g.dispose) UPNG._copyTile(h, l, p, e, c, b, t, n, 0);
        else if (2 == g.dispose) for (r = 0; r < k; r++) e[r] = f[r];
    }
    return d;
  },
};
UPNG.toRGBA8.decodeImage = function (a, c, b, d) {
  var k = c * b,
    e = UPNG.decode._getBPP(d),
    h = Math.ceil((c * e) / 8);
  e = new Uint8Array(4 * k);
  var f = new Uint32Array(e.buffer),
    m = d.ctype,
    g = d.depth,
    t = UPNG._bin.readUshort;
  Date.now();
  if (6 == m) {
    k <<= 2;
    if (8 == g)
      for (var n = 0; n < k; n += 4)
        (e[n] = a[n]),
          (e[n + 1] = a[n + 1]),
          (e[n + 2] = a[n + 2]),
          (e[n + 3] = a[n + 3]);
    if (16 == g) for (n = 0; n < k; n++) e[n] = a[n << 1];
  } else if (2 == m)
    if (((n = d.tabs.tRNS), null == n)) {
      if (8 == g)
        for (n = 0; n < k; n++)
          (b = 3 * n),
            (f[n] = -16777216 | (a[b + 2] << 16) | (a[b + 1] << 8) | a[b]);
      if (16 == g)
        for (n = 0; n < k; n++)
          (b = 6 * n),
            (f[n] = -16777216 | (a[b + 4] << 16) | (a[b + 2] << 8) | a[b]);
    } else {
      var l = n[0];
      c = n[1];
      h = n[2];
      if (8 == g)
        for (n = 0; n < k; n++)
          (d = n << 2),
            (b = 3 * n),
            (f[n] = -16777216 | (a[b + 2] << 16) | (a[b + 1] << 8) | a[b]),
            a[b] == l && a[b + 1] == c && a[b + 2] == h && (e[d + 3] = 0);
      if (16 == g)
        for (n = 0; n < k; n++)
          (d = n << 2),
            (b = 6 * n),
            (f[n] = -16777216 | (a[b + 4] << 16) | (a[b + 2] << 8) | a[b]),
            t(a, b) == l &&
              t(a, b + 2) == c &&
              t(a, b + 4) == h &&
              (e[d + 3] = 0);
    }
  else if (3 == m) {
    f = d.tabs.PLTE;
    l = (t = d.tabs.tRNS) ? t.length : 0;
    if (1 == g)
      for (m = 0; m < b; m++) {
        var p = m * h,
          q = m * c;
        for (n = 0; n < c; n++) {
          d = (q + n) << 2;
          var r = (a[p + (n >> 3)] >> (7 - ((n & 7) << 0))) & 1,
            v = 3 * r;
          e[d] = f[v];
          e[d + 1] = f[v + 1];
          e[d + 2] = f[v + 2];
          e[d + 3] = r < l ? t[r] : 255;
        }
      }
    if (2 == g)
      for (m = 0; m < b; m++)
        for (p = m * h, q = m * c, n = 0; n < c; n++)
          (d = (q + n) << 2),
            (r = (a[p + (n >> 2)] >> (6 - ((n & 3) << 1))) & 3),
            (v = 3 * r),
            (e[d] = f[v]),
            (e[d + 1] = f[v + 1]),
            (e[d + 2] = f[v + 2]),
            (e[d + 3] = r < l ? t[r] : 255);
    if (4 == g)
      for (m = 0; m < b; m++)
        for (p = m * h, q = m * c, n = 0; n < c; n++)
          (d = (q + n) << 2),
            (r = (a[p + (n >> 1)] >> (4 - ((n & 1) << 2))) & 15),
            (v = 3 * r),
            (e[d] = f[v]),
            (e[d + 1] = f[v + 1]),
            (e[d + 2] = f[v + 2]),
            (e[d + 3] = r < l ? t[r] : 255);
    if (8 == g)
      for (n = 0; n < k; n++)
        (d = n << 2),
          (r = a[n]),
          (v = 3 * r),
          (e[d] = f[v]),
          (e[d + 1] = f[v + 1]),
          (e[d + 2] = f[v + 2]),
          (e[d + 3] = r < l ? t[r] : 255);
  } else if (4 == m) {
    if (8 == g)
      for (n = 0; n < k; n++)
        (d = n << 2),
          (c = n << 1),
          (p = a[c]),
          (e[d] = p),
          (e[d + 1] = p),
          (e[d + 2] = p),
          (e[d + 3] = a[c + 1]);
    if (16 == g)
      for (n = 0; n < k; n++)
        (d = n << 2),
          (c = n << 2),
          (p = a[c]),
          (e[d] = p),
          (e[d + 1] = p),
          (e[d + 2] = p),
          (e[d + 3] = a[c + 2]);
  } else if (0 == m)
    for (l = d.tabs.tRNS ? d.tabs.tRNS : -1, m = 0; m < b; m++)
      if (((k = m * h), (d = m * c), 1 == g))
        for (q = 0; q < c; q++)
          (p = 255 * ((a[k + (q >>> 3)] >>> (7 - (q & 7))) & 1)),
            (r = p == 255 * l ? 0 : 255),
            (f[d + q] = (r << 24) | (p << 16) | (p << 8) | p);
      else if (2 == g)
        for (q = 0; q < c; q++)
          (p = 85 * ((a[k + (q >>> 2)] >>> (6 - ((q & 3) << 1))) & 3)),
            (r = p == 85 * l ? 0 : 255),
            (f[d + q] = (r << 24) | (p << 16) | (p << 8) | p);
      else if (4 == g)
        for (q = 0; q < c; q++)
          (p = 17 * ((a[k + (q >>> 1)] >>> (4 - ((q & 1) << 2))) & 15)),
            (r = p == 17 * l ? 0 : 255),
            (f[d + q] = (r << 24) | (p << 16) | (p << 8) | p);
      else if (8 == g)
        for (q = 0; q < c; q++)
          (p = a[k + q]),
            (r = p == l ? 0 : 255),
            (f[d + q] = (r << 24) | (p << 16) | (p << 8) | p);
      else if (16 == g)
        for (q = 0; q < c; q++)
          (p = a[k + (q << 1)]),
            (r = t(a, k + (q << n)) == l ? 0 : 255),
            (f[d + q] = (r << 24) | (p << 16) | (p << 8) | p);
  return e;
};
UPNG.decode = function (a) {
  a = new Uint8Array(a);
  for (
    var c = 8,
      b = UPNG._bin,
      d = b.readUshort,
      k = b.readUint,
      e = { tabs: {}, frames: [] },
      h = new Uint8Array(a.length),
      f = 0,
      m,
      g = 0,
      t = [137, 80, 78, 71, 13, 10, 26, 10],
      n = 0;
    8 > n;
    n++
  )
    if (a[n] != t[n]) throw "The input is not a PNG file!";
  for (; c < a.length; ) {
    t = b.readUint(a, c);
    c += 4;
    var l = b.readASCII(a, c, 4);
    c += 4;
    if ("IHDR" == l) UPNG.decode._IHDR(a, c, e);
    else if ("IDAT" == l) {
      for (n = 0; n < t; n++) h[f + n] = a[c + n];
      f += t;
    } else if ("acTL" == l)
      (e.tabs[l] = { num_frames: k(a, c), num_plays: k(a, c + 4) }),
        (m = new Uint8Array(a.length));
    else if ("fcTL" == l)
      0 != g &&
        ((l = e.frames[e.frames.length - 1]),
        (l.data = UPNG.decode._decompress(
          e,
          m.slice(0, g),
          l.rect.width,
          l.rect.height,
        )),
        (g = 0)),
        (l = {
          x: k(a, c + 12),
          y: k(a, c + 16),
          width: k(a, c + 4),
          height: k(a, c + 8),
        }),
        (n = d(a, c + 22)),
        (n = d(a, c + 20) / (0 == n ? 100 : n)),
        e.frames.push({
          rect: l,
          delay: Math.round(1e3 * n),
          dispose: a[c + 24],
          blend: a[c + 25],
        });
    else if ("fdAT" == l) {
      for (n = 0; n < t - 4; n++) m[g + n] = a[c + n + 4];
      g += t - 4;
    } else if ("pHYs" == l)
      e.tabs[l] = [b.readUint(a, c), b.readUint(a, c + 4), a[c + 8]];
    else if ("cHRM" == l)
      for (e.tabs[l] = [], n = 0; 8 > n; n++)
        e.tabs[l].push(b.readUint(a, c + 4 * n));
    else if ("tEXt" == l) {
      null == e.tabs[l] && (e.tabs[l] = {});
      var p = b.nextZero(a, c);
      n = b.readASCII(a, c, p - c);
      p = b.readASCII(a, p + 1, c + t - p - 1);
      e.tabs[l][n] = p;
    } else if ("iTXt" == l) {
      null == e.tabs[l] && (e.tabs[l] = {});
      var q = c;
      p = b.nextZero(a, q);
      n = b.readASCII(a, q, p - q);
      q = p + 1;
      q += 2;
      p = b.nextZero(a, q);
      b.readASCII(a, q, p - q);
      q = p + 1;
      p = b.nextZero(a, q);
      b.readUTF8(a, q, p - q);
      q = p + 1;
      p = b.readUTF8(a, q, t - (q - c));
      e.tabs[l][n] = p;
    } else if ("PLTE" == l) e.tabs[l] = b.readBytes(a, c, t);
    else if ("hIST" == l)
      for (p = e.tabs.PLTE.length / 3, e.tabs[l] = [], n = 0; n < p; n++)
        e.tabs[l].push(d(a, c + 2 * n));
    else if ("tRNS" == l)
      3 == e.ctype
        ? (e.tabs[l] = b.readBytes(a, c, t))
        : 0 == e.ctype
          ? (e.tabs[l] = d(a, c))
          : 2 == e.ctype && (e.tabs[l] = [d(a, c), d(a, c + 2), d(a, c + 4)]);
    else if ("gAMA" == l) e.tabs[l] = b.readUint(a, c) / 1e5;
    else if ("sRGB" == l) e.tabs[l] = a[c];
    else if ("bKGD" == l)
      0 == e.ctype || 4 == e.ctype
        ? (e.tabs[l] = [d(a, c)])
        : 2 == e.ctype || 6 == e.ctype
          ? (e.tabs[l] = [d(a, c), d(a, c + 2), d(a, c + 4)])
          : 3 == e.ctype && (e.tabs[l] = a[c]);
    else if ("IEND" == l) break;
    c += t;
    b.readUint(a, c);
    c += 4;
  }
  0 != g &&
    ((l = e.frames[e.frames.length - 1]),
    (l.data = UPNG.decode._decompress(
      e,
      m.slice(0, g),
      l.rect.width,
      l.rect.height,
    )));
  e.data = UPNG.decode._decompress(e, h, e.width, e.height);
  delete e.compress;
  delete e.interlace;
  delete e.filter;
  return e;
};
UPNG.decode._decompress = function (a, c, b, d) {
  Date.now();
  var k = UPNG.decode._getBPP(a);
  k = new Uint8Array((Math.ceil((b * k) / 8) + 1 + a.interlace) * d);
  c = UPNG.decode._inflate(c, k);
  Date.now();
  0 == a.interlace
    ? (c = UPNG.decode._filterZero(c, a, 0, b, d))
    : 1 == a.interlace && (c = UPNG.decode._readInterlace(c, a));
  return c;
};
UPNG.decode._inflate = function (a, c) {
  return UPNG.inflateRaw(new Uint8Array(a.buffer, 2, a.length - 6), c);
};
UPNG.inflateRaw = (function () {
  var a = {
    N: function (c, b) {
      var d = Uint8Array,
        k = 0,
        e,
        h = 0,
        f = (e = 0),
        m = 0;
      if (3 == c[0] && 0 == c[1]) return b ? b : new d(0);
      var g = a.b,
        t = a.e,
        n = a.R,
        l = a.n,
        p = a.A,
        q = a.Z,
        r = a.m,
        v = null == b;
      for (v && (b = new d((c.length >>> 2) << 3)); 0 == k; ) {
        k = g(c, m, 1);
        var u = g(c, m + 1, 2);
        m += 3;
        if (0 == u)
          0 != (m & 7) && (m += 8 - (m & 7)),
            (m = (m >>> 3) + 4),
            (u = c[m - 4] | (c[m - 3] << 8)),
            v && (b = a.W(b, f + u)),
            b.set(new d(c.buffer, c.byteOffset + m, u), f),
            (m = (m + u) << 3),
            (f += u);
        else {
          v && (b = a.W(b, f + 131072));
          if (1 == u) {
            var y = r.J;
            var x = r.h;
            h = 511;
            e = 31;
          }
          if (2 == u) {
            e = t(c, m, 5) + 257;
            u = t(c, m + 5, 5) + 1;
            y = t(c, m + 10, 4) + 4;
            m += 14;
            h = 1;
            for (x = 0; 38 > x; x += 2) (r.Q[x] = 0), (r.Q[x + 1] = 0);
            for (x = 0; x < y; x++) {
              var w = t(c, m + 3 * x, 3);
              r.Q[(r.X[x] << 1) + 1] = w;
              w > h && (h = w);
            }
            m += 3 * y;
            l(r.Q, h);
            p(r.Q, h, r.u);
            y = r.w;
            x = r.d;
            m = n(r.u, (1 << h) - 1, e + u, c, m, r.v);
            w = a.V(r.v, 0, e, r.C);
            h = (1 << w) - 1;
            u = a.V(r.v, e, u, r.D);
            e = (1 << u) - 1;
            l(r.C, w);
            p(r.C, w, y);
            l(r.D, u);
            p(r.D, u, x);
          }
          for (;;)
            if (
              ((u = y[q(c, m) & h]), (m += u & 15), (w = u >>> 4), 0 == w >>> 8)
            )
              b[f++] = w;
            else if (256 == w) break;
            else {
              u = f + w - 254;
              264 < w &&
                ((w = r.q[w - 257]),
                (u = f + (w >>> 3) + t(c, m, w & 7)),
                (m += w & 7));
              w = x[q(c, m) & e];
              m += w & 15;
              w = r.c[w >>> 4];
              var z = (w >>> 4) + g(c, m, w & 15);
              for (m += w & 15; f < u; )
                (b[f] = b[f++ - z]),
                  (b[f] = b[f++ - z]),
                  (b[f] = b[f++ - z]),
                  (b[f] = b[f++ - z]);
              f = u;
            }
        }
      }
      return b.length == f ? b : b.slice(0, f);
    },
    W: function (a, b) {
      var c = a.length;
      if (b <= c) return a;
      c = new Uint8Array(c << 1);
      c.set(a, 0);
      return c;
    },
    R: function (c, b, d, k, e, h) {
      for (var f = a.e, m = a.Z, g = 0; g < d; ) {
        var t = c[m(k, e) & b];
        e += t & 15;
        var n = t >>> 4;
        if (15 >= n) (h[g] = n), g++;
        else {
          var l = (t = 0);
          16 == n
            ? ((l = 3 + f(k, e, 2)), (e += 2), (t = h[g - 1]))
            : 17 == n
              ? ((l = 3 + f(k, e, 3)), (e += 3))
              : 18 == n && ((l = 11 + f(k, e, 7)), (e += 7));
          for (n = g + l; g < n; ) (h[g] = t), g++;
        }
      }
      return e;
    },
    V: function (a, b, d, k) {
      for (var c = 0, h = 0, f = k.length >>> 1; h < d; ) {
        var m = a[h + b];
        k[h << 1] = 0;
        k[(h << 1) + 1] = m;
        m > c && (c = m);
        h++;
      }
      for (; h < f; ) (k[h << 1] = 0), (k[(h << 1) + 1] = 0), h++;
      return c;
    },
    n: function (c, b) {
      var d = a.m,
        k = c.length,
        e,
        h;
      var f = d.j;
      for (e = 0; e <= b; e++) f[e] = 0;
      for (e = 1; e < k; e += 2) f[c[e]]++;
      d = d.K;
      e = 0;
      f[0] = 0;
      for (h = 1; h <= b; h++) (e = (e + f[h - 1]) << 1), (d[h] = e);
      for (f = 0; f < k; f += 2)
        (e = c[f + 1]), 0 != e && ((c[f] = d[e]), d[e]++);
    },
    A: function (c, b, d) {
      for (var k = c.length, e = a.m.r, h = 0; h < k; h += 2)
        if (0 != c[h + 1]) {
          var f = c[h + 1],
            m = ((h >> 1) << 4) | f,
            g = b - f;
          f = c[h] << g;
          for (g = f + (1 << g); f != g; ) (d[e[f] >>> (15 - b)] = m), f++;
        }
    },
    l: function (c, b) {
      for (var d = a.m.r, k = 15 - b, e = 0; e < c.length; e += 2)
        c[e] = d[c[e] << (b - c[e + 1])] >>> k;
    },
    M: function (a, b, d) {
      d <<= b & 7;
      b >>>= 3;
      a[b] |= d;
      a[b + 1] |= d >>> 8;
    },
    I: function (a, b, d) {
      d <<= b & 7;
      b >>>= 3;
      a[b] |= d;
      a[b + 1] |= d >>> 8;
      a[b + 2] |= d >>> 16;
    },
    e: function (a, b, d) {
      return (
        ((a[b >>> 3] | (a[(b >>> 3) + 1] << 8)) >>> (b & 7)) & ((1 << d) - 1)
      );
    },
    b: function (a, b, d) {
      return (
        ((a[b >>> 3] | (a[(b >>> 3) + 1] << 8) | (a[(b >>> 3) + 2] << 16)) >>>
          (b & 7)) &
        ((1 << d) - 1)
      );
    },
    Z: function (a, b) {
      return (
        (a[b >>> 3] | (a[(b >>> 3) + 1] << 8) | (a[(b >>> 3) + 2] << 16)) >>>
        (b & 7)
      );
    },
    i: function (a, b) {
      return (
        (a[b >>> 3] |
          (a[(b >>> 3) + 1] << 8) |
          (a[(b >>> 3) + 2] << 16) |
          (a[(b >>> 3) + 3] << 24)) >>>
        (b & 7)
      );
    },
  };
  a.m = (function () {
    var a = Uint16Array,
      b = Uint32Array;
    return {
      K: new a(16),
      j: new a(16),
      X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
      S: [
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
        67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999,
      ],
      T: [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,
        5, 5, 5, 5, 0, 0, 0, 0,
      ],
      q: new a(32),
      p: [
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385,
        513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577,
        65535, 65535,
      ],
      z: [
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
        10, 11, 11, 12, 12, 13, 13, 0, 0,
      ],
      c: new b(32),
      J: new a(512),
      _: [],
      h: new a(32),
      $: [],
      w: new a(32768),
      C: [],
      v: [],
      d: new a(32768),
      D: [],
      u: new a(512),
      Q: [],
      r: new a(32768),
      s: new b(286),
      Y: new b(30),
      a: new b(19),
      t: new b(15e3),
      k: new a(65536),
      g: new a(32768),
    };
  })();
  (function () {
    function c(a, b, c) {
      for (; 0 != b--; ) a.push(0, c);
    }
    for (var b = a.m, d = 0; 32768 > d; d++) {
      var k = d;
      k = ((k & 2863311530) >>> 1) | ((k & 1431655765) << 1);
      k = ((k & 3435973836) >>> 2) | ((k & 858993459) << 2);
      k = ((k & 4042322160) >>> 4) | ((k & 252645135) << 4);
      k = ((k & 4278255360) >>> 8) | ((k & 16711935) << 8);
      b.r[d] = ((k >>> 16) | (k << 16)) >>> 17;
    }
    for (d = 0; 32 > d; d++)
      (b.q[d] = (b.S[d] << 3) | b.T[d]), (b.c[d] = (b.p[d] << 4) | b.z[d]);
    c(b._, 144, 8);
    c(b._, 112, 9);
    c(b._, 24, 7);
    c(b._, 8, 8);
    a.n(b._, 9);
    a.A(b._, 9, b.J);
    a.l(b._, 9);
    c(b.$, 32, 5);
    a.n(b.$, 5);
    a.A(b.$, 5, b.h);
    a.l(b.$, 5);
    c(b.Q, 19, 0);
    c(b.C, 286, 0);
    c(b.D, 30, 0);
    c(b.v, 320, 0);
  })();
  return a.N;
})();
UPNG.decode._readInterlace = function (a, c) {
  for (
    var b = c.width,
      d = c.height,
      k = UPNG.decode._getBPP(c),
      e = k >> 3,
      h = Math.ceil((b * k) / 8),
      f = new Uint8Array(d * h),
      m = 0,
      g = [0, 0, 4, 0, 2, 0, 1],
      t = [0, 4, 0, 2, 0, 1, 0],
      n = [8, 8, 8, 4, 4, 2, 2],
      l = [8, 8, 4, 4, 2, 2, 1],
      p = 0;
    7 > p;

  ) {
    for (var q = n[p], r = l[p], v = 0, u = 0, y = g[p]; y < d; ) (y += q), u++;
    for (y = t[p]; y < b; ) (y += r), v++;
    y = Math.ceil((v * k) / 8);
    UPNG.decode._filterZero(a, c, m, v, u);
    for (var x = 0, w = g[p]; w < d; ) {
      for (var z = t[p], B = (m + x * y) << 3; z < b; ) {
        if (1 == k) {
          var A = a[B >> 3];
          A = (A >> (7 - (B & 7))) & 1;
          f[w * h + (z >> 3)] |= A << (7 - ((z & 7) << 0));
        }
        2 == k &&
          ((A = a[B >> 3]),
          (A = (A >> (6 - (B & 7))) & 3),
          (f[w * h + (z >> 2)] |= A << (6 - ((z & 3) << 1))));
        4 == k &&
          ((A = a[B >> 3]),
          (A = (A >> (4 - (B & 7))) & 15),
          (f[w * h + (z >> 1)] |= A << (4 - ((z & 1) << 2))));
        if (8 <= k) {
          A = w * h + z * e;
          for (var C = 0; C < e; C++) f[A + C] = a[(B >> 3) + C];
        }
        B += k;
        z += r;
      }
      x++;
      w += q;
    }
    0 != v * u && (m += u * (1 + y));
    p += 1;
  }
  return f;
};
UPNG.decode._getBPP = function (a) {
  return [1, null, 3, 1, 2, null, 4][a.ctype] * a.depth;
};
UPNG.decode._filterZero = function (a, c, b, d, k) {
  c = UPNG.decode._getBPP(c);
  d = Math.ceil((d * c) / 8);
  var e = UPNG.decode._paeth;
  c = Math.ceil(c / 8);
  var h = a[b],
    f;
  1 < h && (a[b] = [0, 0, 1][h - 2]);
  if (3 == h)
    for (f = c; f < d; f++) a[f + 1] = (a[f + 1] + (a[f + 1 - c] >>> 1)) & 255;
  for (var m = 0; m < k; m++) {
    var g = b + m * d;
    var t = g + m + 1;
    h = a[t - 1];
    f = 0;
    if (0 == h) for (; f < d; f++) a[g + f] = a[t + f];
    else if (1 == h) {
      for (; f < c; f++) a[g + f] = a[t + f];
      for (; f < d; f++) a[g + f] = a[t + f] + a[g + f - c];
    } else if (2 == h) for (; f < d; f++) a[g + f] = a[t + f] + a[g + f - d];
    else if (3 == h) {
      for (; f < c; f++) a[g + f] = a[t + f] + (a[g + f - d] >>> 1);
      for (; f < d; f++)
        a[g + f] = a[t + f] + ((a[g + f - d] + a[g + f - c]) >>> 1);
    } else {
      for (; f < c; f++) a[g + f] = a[t + f] + e(0, a[g + f - d], 0);
      for (; f < d; f++)
        a[g + f] = a[t + f] + e(a[g + f - c], a[g + f - d], a[g + f - c - d]);
    }
  }
  return a;
};
UPNG.decode._paeth = function (a, c, b) {
  var d = a + c - b,
    k = d - a,
    e = d - c;
  d -= b;
  return k * k <= e * e && k * k <= d * d ? a : e * e <= d * d ? c : b;
};
UPNG.decode._IHDR = function (a, c, b) {
  var d = UPNG._bin;
  b.width = d.readUint(a, c);
  c += 4;
  b.height = d.readUint(a, c);
  c += 4;
  b.depth = a[c];
  c++;
  b.ctype = a[c];
  c++;
  b.compress = a[c];
  c++;
  b.filter = a[c];
  c++;
  b.interlace = a[c];
};
UPNG._bin = {
  nextZero: function (a, c) {
    for (; 0 != a[c]; ) c++;
    return c;
  },
  readUshort: function (a, c) {
    return (a[c] << 8) | a[c + 1];
  },
  writeUshort: function (a, c, b) {
    a[c] = (b >> 8) & 255;
    a[c + 1] = b & 255;
  },
  readUint: function (a, c) {
    return 16777216 * a[c] + ((a[c + 1] << 16) | (a[c + 2] << 8) | a[c + 3]);
  },
  writeUint: function (a, c, b) {
    a[c] = (b >> 24) & 255;
    a[c + 1] = (b >> 16) & 255;
    a[c + 2] = (b >> 8) & 255;
    a[c + 3] = b & 255;
  },
  readASCII: function (a, c, b) {
    for (var d = "", k = 0; k < b; k++) d += String.fromCharCode(a[c + k]);
    return d;
  },
  writeASCII: function (a, c, b) {
    for (var d = 0; d < b.length; d++) a[c + d] = b.charCodeAt(d);
  },
  readBytes: function (a, c, b) {
    for (var d = [], k = 0; k < b; k++) d.push(a[c + k]);
    return d;
  },
  pad: function (a) {
    return 2 > a.length ? "0" + a : a;
  },
  readUTF8: function (a, c, b) {
    for (var d = "", k, e = 0; e < b; e++)
      d += "%" + UPNG._bin.pad(a[c + e].toString(16));
    try {
      k = decodeURIComponent(d);
    } catch (h) {
      return UPNG._bin.readASCII(a, c, b);
    }
    return k;
  },
};
UPNG._copyTile = function (a, c, b, d, k, e, h, f, m) {
  var g = Math.min(c, k);
  b = Math.min(b, e);
  for (var t, n = 0; n < b; n++)
    for (var l = 0; l < g; l++)
      if (
        (0 <= h && 0 <= f
          ? ((t = (n * c + l) << 2), (e = ((f + n) * k + h + l) << 2))
          : ((t = ((-f + n) * c - h + l) << 2), (e = (n * k + l) << 2)),
        0 == m)
      )
        (d[e] = a[t]),
          (d[e + 1] = a[t + 1]),
          (d[e + 2] = a[t + 2]),
          (d[e + 3] = a[t + 3]);
      else if (1 == m) {
        var p = (1 / 255) * a[t + 3],
          q = a[t] * p,
          r = a[t + 1] * p;
        t = a[t + 2] * p;
        var v = (1 / 255) * d[e + 3],
          u = d[e] * v,
          y = d[e + 1] * v,
          x = d[e + 2] * v,
          w = 1 - p;
        p += v * w;
        v = 0 == p ? 0 : 1 / p;
        d[e + 3] = 255 * p;
        d[e + 0] = (q + u * w) * v;
        d[e + 1] = (r + y * w) * v;
        d[e + 2] = (t + x * w) * v;
      } else if (2 == m)
        (p = a[t + 3]),
          (q = a[t]),
          (r = a[t + 1]),
          (t = a[t + 2]),
          (v = d[e + 3]),
          (u = d[e]),
          (y = d[e + 1]),
          (x = d[e + 2]),
          p == v && q == u && r == y && t == x
            ? ((d[e] = 0), (d[e + 1] = 0), (d[e + 2] = 0), (d[e + 3] = 0))
            : ((d[e] = q), (d[e + 1] = r), (d[e + 2] = t), (d[e + 3] = p));
      else if (
        3 == m &&
        ((p = a[t + 3]),
        (q = a[t]),
        (r = a[t + 1]),
        (t = a[t + 2]),
        (v = d[e + 3]),
        (u = d[e]),
        (y = d[e + 1]),
        (x = d[e + 2]),
        (p != v || q != u || r != y || t != x) && 220 > p && 20 < v)
      )
        return !1;
  return !0;
};
UPNG.encode = function (a, c, b, d, k, e, h) {
  null == d && (d = 0);
  null == h && (h = !1);
  a = UPNG.encode.compress(a, c, b, d, [!1, !1, !1, 0, h]);
  UPNG.encode.compressPNG(a, -1);
  return UPNG.encode._main(a, c, b, k, e);
};
UPNG.encodeLL = function (a, c, b, d, k, e, h, f) {
  var m = { ctype: (1 == d ? 0 : 2) + (0 == k ? 0 : 4), depth: e, frames: [] };
  Date.now();
  d = (d + k) * e;
  k = d * c;
  for (e = 0; e < a.length; e++)
    m.frames.push({
      rect: { x: 0, y: 0, width: c, height: b },
      img: new Uint8Array(a[e]),
      blend: 0,
      dispose: 1,
      bpp: Math.ceil(d / 8),
      bpl: Math.ceil(k / 8),
    });
  UPNG.encode.compressPNG(m, 0, !0);
  return UPNG.encode._main(m, c, b, h, f);
};
UPNG.encode._main = function (a, c, b, d, k) {
  null == k && (k = {});
  var e = UPNG.crc.crc,
    h = UPNG._bin.writeUint,
    f = UPNG._bin.writeUshort,
    m = UPNG._bin.writeASCII,
    g = 8,
    t = 1 < a.frames.length,
    n = !1,
    l = 33 + (t ? 20 : 0);
  null != k.sRGB && (l += 13);
  null != k.pHYs && (l += 21);
  if (3 == a.ctype) {
    for (var p = a.plte.length, q = 0; q < p; q++)
      255 != a.plte[q] >>> 24 && (n = !0);
    l += 3 * p + 12 + (n ? 1 * p + 12 : 0);
  }
  for (q = 0; q < a.frames.length; q++)
    (p = a.frames[q]),
      t && (l += 38),
      (l += p.cimg.length + 12),
      0 != q && (l += 4);
  l = new Uint8Array(l + 12);
  p = [137, 80, 78, 71, 13, 10, 26, 10];
  for (q = 0; 8 > q; q++) l[q] = p[q];
  h(l, g, 13);
  g += 4;
  m(l, g, "IHDR");
  g += 4;
  h(l, g, c);
  g += 4;
  h(l, g, b);
  g += 4;
  l[g] = a.depth;
  g++;
  l[g] = a.ctype;
  g++;
  l[g] = 0;
  g++;
  l[g] = 0;
  g++;
  l[g] = 0;
  g++;
  h(l, g, e(l, g - 17, 17));
  g += 4;
  null != k.sRGB &&
    (h(l, g, 1),
    (g += 4),
    m(l, g, "sRGB"),
    (g += 4),
    (l[g] = k.sRGB),
    g++,
    h(l, g, e(l, g - 5, 5)),
    (g += 4));
  null != k.pHYs &&
    (h(l, g, 9),
    (g += 4),
    m(l, g, "pHYs"),
    (g += 4),
    h(l, g, k.pHYs[0]),
    (g += 4),
    h(l, g, k.pHYs[1]),
    (g += 4),
    (l[g] = k.pHYs[2]),
    g++,
    h(l, g, e(l, g - 13, 13)),
    (g += 4));
  t &&
    (h(l, g, 8),
    (g += 4),
    m(l, g, "acTL"),
    (g += 4),
    h(l, g, a.frames.length),
    (g += 4),
    h(l, g, null != k.loop ? k.loop : 0),
    (g += 4),
    h(l, g, e(l, g - 12, 12)),
    (g += 4));
  if (3 == a.ctype) {
    p = a.plte.length;
    h(l, g, 3 * p);
    g += 4;
    m(l, g, "PLTE");
    g += 4;
    for (q = 0; q < p; q++) {
      c = 3 * q;
      b = a.plte[q];
      k = (b >>> 8) & 255;
      var r = (b >>> 16) & 255;
      l[g + c + 0] = b & 255;
      l[g + c + 1] = k;
      l[g + c + 2] = r;
    }
    g += 3 * p;
    h(l, g, e(l, g - 3 * p - 4, 3 * p + 4));
    g += 4;
    if (n) {
      h(l, g, p);
      g += 4;
      m(l, g, "tRNS");
      g += 4;
      for (q = 0; q < p; q++) l[g + q] = (a.plte[q] >>> 24) & 255;
      g += p;
      h(l, g, e(l, g - p - 4, p + 4));
      g += 4;
    }
  }
  for (q = n = 0; q < a.frames.length; q++)
    (p = a.frames[q]),
      t &&
        (h(l, g, 26),
        (g += 4),
        m(l, g, "fcTL"),
        (g += 4),
        h(l, g, n++),
        (g += 4),
        h(l, g, p.rect.width),
        (g += 4),
        h(l, g, p.rect.height),
        (g += 4),
        h(l, g, p.rect.x),
        (g += 4),
        h(l, g, p.rect.y),
        (g += 4),
        f(l, g, d[q]),
        (g += 2),
        f(l, g, 1e3),
        (g += 2),
        (l[g] = p.dispose),
        g++,
        (l[g] = p.blend),
        g++,
        h(l, g, e(l, g - 30, 30)),
        (g += 4)),
      (c = p.cimg),
      (p = c.length),
      h(l, g, p + (0 == q ? 0 : 4)),
      (b = g += 4),
      m(l, g, 0 == q ? "IDAT" : "fdAT"),
      (g += 4),
      0 != q && (h(l, g, n++), (g += 4)),
      l.set(c, g),
      (g += p),
      h(l, g, e(l, b, g - b)),
      (g += 4);
  h(l, g, 0);
  g += 4;
  m(l, g, "IEND");
  g += 4;
  h(l, g, e(l, g - 4, 4));
  return l.buffer;
};
UPNG.encode.compressPNG = function (a, c, b) {
  for (var d = 0; d < a.frames.length; d++) {
    var k = a.frames[d],
      e = k.rect.height,
      h = new Uint8Array(e * k.bpl + e);
    k.cimg = UPNG.encode._filterZero(k.img, e, k.bpp, k.bpl, h, c, b);
  }
};
UPNG.encode.compress = function (a, c, b, d, k) {
  var e = k[0],
    h = k[1],
    f = k[2],
    m = k[3];
  k = k[4];
  for (var g = 6, t = 8, n = 255, l = 0; l < a.length; l++)
    for (var p = new Uint8Array(a[l]), q = p.length, r = 0; r < q; r += 4)
      n &= p[r + 3];
  n = 255 != n;
  a = UPNG.encode.framize(a, c, b, e, h, f);
  e = {};
  c = [];
  b = [];
  if (0 != d) {
    l = [];
    for (r = 0; r < a.length; r++) l.push(a[r].img.buffer);
    l = UPNG.encode.concatRGBA(l);
    d = UPNG.quantize(l, d);
    q = 0;
    e = new Uint8Array(d.abuf);
    for (r = 0; r < a.length; r++) {
      h = a[r].img;
      f = h.length;
      b.push(new Uint8Array(d.inds.buffer, q >> 2, f >> 2));
      for (l = 0; l < f; l += 4)
        (h[l] = e[q + l]),
          (h[l + 1] = e[q + l + 1]),
          (h[l + 2] = e[q + l + 2]),
          (h[l + 3] = e[q + l + 3]);
      q += f;
    }
    for (r = 0; r < d.plte.length; r++) c.push(d.plte[r].est.rgba);
  } else
    for (l = 0; l < a.length; l++)
      for (
        q = a[l],
          h = new Uint32Array(q.img.buffer),
          d = q.rect.width,
          q = h.length,
          f = new Uint8Array(q),
          b.push(f),
          r = 0;
        r < q;
        r++
      )
        if (((p = h[r]), 0 != r && p == h[r - 1])) f[r] = f[r - 1];
        else if (r > d && p == h[r - d]) f[r] = f[r - d];
        else {
          var v = e[p];
          if (null == v && ((e[p] = v = c.length), c.push(p), 300 <= c.length))
            break;
          f[r] = v;
        }
  e = c.length;
  256 >= e &&
    0 == k &&
    (t = Math.max(2 >= e ? 1 : 4 >= e ? 2 : 16 >= e ? 4 : 8, m));
  for (l = 0; l < a.length; l++) {
    q = a[l];
    d = q.rect.width;
    m = q.rect.height;
    f = q.img;
    new Uint32Array(f.buffer);
    h = 4 * d;
    r = 4;
    if (256 >= e && 0 == k) {
      h = Math.ceil((t * d) / 8);
      g = new Uint8Array(h * m);
      f = b[l];
      for (p = 0; p < m; p++)
        if (((r = p * h), (v = p * d), 8 == t))
          for (var u = 0; u < d; u++) g[r + u] = f[v + u];
        else if (4 == t)
          for (u = 0; u < d; u++)
            g[r + (u >> 1)] |= f[v + u] << (4 - 4 * (u & 1));
        else if (2 == t)
          for (u = 0; u < d; u++)
            g[r + (u >> 2)] |= f[v + u] << (6 - 2 * (u & 3));
        else if (1 == t)
          for (u = 0; u < d; u++) g[r + (u >> 3)] |= f[v + u] << (7 - (u & 7));
      f = g;
      g = 3;
      r = 1;
    } else if (0 == n && 1 == a.length) {
      g = new Uint8Array(d * m * 3);
      m *= d;
      for (r = 0; r < m; r++)
        (h = 3 * r),
          (p = 4 * r),
          (g[h] = f[p]),
          (g[h + 1] = f[p + 1]),
          (g[h + 2] = f[p + 2]);
      f = g;
      g = 2;
      r = 3;
      h = 3 * d;
    }
    q.img = f;
    q.bpl = h;
    q.bpp = r;
  }
  return { ctype: g, depth: t, plte: c, frames: a };
};
UPNG.encode.framize = function (a, c, b, d, k, e) {
  for (var h = [], f = 0; f < a.length; f++) {
    var m = new Uint8Array(a[f]),
      g = new Uint32Array(m.buffer),
      t = 0,
      n = 0,
      l = c,
      p = b,
      q = d ? 1 : 0;
    if (0 != f) {
      var r = e || d || 1 == f || 0 != h[f - 2].dispose ? 1 : 2;
      q = 0;
      for (var v = 1e9, u = 0; u < r; u++) {
        new Uint8Array(a[f - 1 - u]);
        for (
          var y = new Uint32Array(a[f - 1 - u]),
            x = c,
            w = b,
            z = -1,
            B = -1,
            A = 0;
          A < b;
          A++
        )
          for (var C = 0; C < c; C++) {
            var D = A * c + C;
            g[D] != y[D] &&
              (C < x && (x = C),
              C > z && (z = C),
              A < w && (w = A),
              A > B && (B = A));
          }
        -1 == z && (x = w = z = B = 0);
        k && (1 == (x & 1) && x--, 1 == (w & 1) && w--);
        y = (z - x + 1) * (B - w + 1);
        y < v &&
          ((v = y),
          (q = u),
          (t = x),
          (n = w),
          (l = z - x + 1),
          (p = B - w + 1));
      }
      r = new Uint8Array(a[f - 1 - q]);
      1 == q && (h[f - 1].dispose = 2);
      g = new Uint8Array(l * p * 4);
      UPNG._copyTile(r, c, b, g, l, p, -t, -n, 0);
      q = UPNG._copyTile(m, c, b, g, l, p, -t, -n, 3) ? 1 : 0;
      1 == q
        ? UPNG.encode._prepareDiff(m, c, b, g, {
            x: t,
            y: n,
            width: l,
            height: p,
          })
        : UPNG._copyTile(m, c, b, g, l, p, -t, -n, 0);
    } else g = m.slice(0);
    h.push({
      rect: { x: t, y: n, width: l, height: p },
      img: g,
      blend: q,
      dispose: 0,
    });
  }
  if (d)
    for (f = 0; f < h.length; f++)
      (d = h[f]),
        1 != d.blend &&
          ((d = d.rect),
          (e = h[f - 1].rect),
          (m = Math.min(d.x, e.x)),
          (t = Math.min(d.y, e.y)),
          (d = {
            x: m,
            y: t,
            width: Math.max(d.x + d.width, e.x + e.width) - m,
            height: Math.max(d.y + d.height, e.y + e.height) - t,
          }),
          (h[f - 1].dispose = 1),
          0 != f - 1 && UPNG.encode._updateFrame(a, c, b, h, f - 1, d, k),
          UPNG.encode._updateFrame(a, c, b, h, f, d, k));
  if (1 != a.length) for (D = 0; D < h.length; D++);
  return h;
};
UPNG.encode._updateFrame = function (a, c, b, d, k, e, h) {
  var f = Uint8Array,
    m = Uint32Array,
    g = new f(a[k - 1]),
    t = new m(a[k - 1]),
    n = k + 1 < a.length ? new f(a[k + 1]) : null;
  a = new f(a[k]);
  m = new m(a.buffer);
  f = c;
  for (var l = b, p = -1, q = -1, r = 0; r < e.height; r++)
    for (var v = 0; v < e.width; v++) {
      var u = e.x + v,
        y = e.y + r,
        x = y * c + u,
        w = m[x];
      0 != w &&
        (0 != d[k - 1].dispose ||
          t[x] != w ||
          (null != n && 0 == n[4 * x + 3])) &&
        (u < f && (f = u),
        u > p && (p = u),
        y < l && (l = y),
        y > q && (q = y));
    }
  -1 == p && (f = l = p = q = 0);
  h && (1 == (f & 1) && f--, 1 == (l & 1) && l--);
  e = { x: f, y: l, width: p - f + 1, height: q - l + 1 };
  h = d[k];
  h.rect = e;
  h.blend = 1;
  h.img = new Uint8Array(e.width * e.height * 4);
  0 == d[k - 1].dispose
    ? (UPNG._copyTile(g, c, b, h.img, e.width, e.height, -e.x, -e.y, 0),
      UPNG.encode._prepareDiff(a, c, b, h.img, e))
    : UPNG._copyTile(a, c, b, h.img, e.width, e.height, -e.x, -e.y, 0);
};
UPNG.encode._prepareDiff = function (a, c, b, d, k) {
  UPNG._copyTile(a, c, b, d, k.width, k.height, -k.x, -k.y, 2);
};
UPNG.encode._filterZero = function (a, c, b, d, k, e, h) {
  var f = [],
    m = [0, 1, 2, 3, 4];
  if (-1 != e) m = [e];
  else if (5e5 < c * d || 1 == b) m = [0];
  var g;
  h && (g = { level: 0 });
  h = h && null != UZIP ? UZIP : pako;
  for (e = 0; e < m.length; e++) {
    for (var t = 0; t < c; t++) UPNG.encode._filterLine(k, a, t, d, b, m[e]);
    f.push(h.deflate(k, g));
  }
  a = 1e9;
  for (e = 0; e < f.length; e++)
    if (f[e].length < a) {
      var n = e;
      a = f[e].length;
    }
  return f[n];
};
UPNG.encode._filterLine = function (a, c, b, d, k, e) {
  var h = b * d,
    f = h + b,
    m = UPNG.decode._paeth;
  a[f] = e;
  f++;
  if (0 == e)
    if (500 > d) for (b = 0; b < d; b++) a[f + b] = c[h + b];
    else a.set(new Uint8Array(c.buffer, h, d), f);
  else if (1 == e) {
    for (b = 0; b < k; b++) a[f + b] = c[h + b];
    for (b = k; b < d; b++) a[f + b] = (c[h + b] - c[h + b - k] + 256) & 255;
  } else if (0 == b) {
    for (b = 0; b < k; b++) a[f + b] = c[h + b];
    if (2 == e) for (b = k; b < d; b++) a[f + b] = c[h + b];
    if (3 == e)
      for (b = k; b < d; b++)
        a[f + b] = (c[h + b] - (c[h + b - k] >> 1) + 256) & 255;
    if (4 == e)
      for (b = k; b < d; b++)
        a[f + b] = (c[h + b] - m(c[h + b - k], 0, 0) + 256) & 255;
  } else {
    if (2 == e)
      for (b = 0; b < d; b++) a[f + b] = (c[h + b] + 256 - c[h + b - d]) & 255;
    if (3 == e) {
      for (b = 0; b < k; b++)
        a[f + b] = (c[h + b] + 256 - (c[h + b - d] >> 1)) & 255;
      for (b = k; b < d; b++)
        a[f + b] =
          (c[h + b] + 256 - ((c[h + b - d] + c[h + b - k]) >> 1)) & 255;
    }
    if (4 == e) {
      for (b = 0; b < k; b++)
        a[f + b] = (c[h + b] + 256 - m(0, c[h + b - d], 0)) & 255;
      for (b = k; b < d; b++)
        a[f + b] =
          (c[h + b] + 256 - m(c[h + b - k], c[h + b - d], c[h + b - k - d])) &
          255;
    }
  }
};
UPNG.crc = {
  table: (function () {
    for (var a = new Uint32Array(256), c = 0; 256 > c; c++) {
      for (var b = c, d = 0; 8 > d; d++)
        b = b & 1 ? 3988292384 ^ (b >>> 1) : b >>> 1;
      a[c] = b;
    }
    return a;
  })(),
  update: function (a, c, b, d) {
    for (var k = 0; k < d; k++)
      a = UPNG.crc.table[(a ^ c[b + k]) & 255] ^ (a >>> 8);
    return a;
  },
  crc: function (a, c, b) {
    return UPNG.crc.update(4294967295, a, c, b) ^ 4294967295;
  },
};
UPNG.quantize = function (a, c) {
  var b = new Uint8Array(a),
    d = b.slice(0),
    k = new Uint32Array(d.buffer),
    e = UPNG.quantize.getKDtree(d, c),
    h = e[0];
  e = e[1];
  for (
    var f = b.length, m = new Uint8Array(b.length >> 2), g = 0;
    g < f;
    g += 4
  ) {
    var t = UPNG.quantize.getNearest(
      h,
      (1 / 255) * b[g],
      (1 / 255) * b[g + 1],
      (1 / 255) * b[g + 2],
      (1 / 255) * b[g + 3],
    );
    m[g >> 2] = t.ind;
    k[g >> 2] = t.est.rgba;
  }
  return { abuf: d.buffer, inds: m, plte: e };
};
UPNG.quantize.getKDtree = function (a, c, b) {
  null == b && (b = 1e-4);
  var d = new Uint32Array(a.buffer),
    k = {
      i0: 0,
      i1: a.length,
      bst: null,
      est: null,
      tdst: 0,
      left: null,
      right: null,
    };
  k.bst = UPNG.quantize.stats(a, k.i0, k.i1);
  k.est = UPNG.quantize.estats(k.bst);
  for (var e = [k]; e.length < c; ) {
    for (var h = 0, f = 0, m = 0; m < e.length; m++)
      e[m].est.L > h && ((h = e[m].est.L), (f = m));
    if (h < b) break;
    h = e[f];
    m = UPNG.quantize.splitPixels(a, d, h.i0, h.i1, h.est.e, h.est.eMq255);
    if (h.i0 >= m || h.i1 <= m) h.est.L = 0;
    else {
      var g = {
        i0: h.i0,
        i1: m,
        bst: null,
        est: null,
        tdst: 0,
        left: null,
        right: null,
      };
      g.bst = UPNG.quantize.stats(a, g.i0, g.i1);
      g.est = UPNG.quantize.estats(g.bst);
      var t = {
        i0: m,
        i1: h.i1,
        bst: null,
        est: null,
        tdst: 0,
        left: null,
        right: null,
      };
      t.bst = { R: [], m: [], N: h.bst.N - g.bst.N };
      for (m = 0; 16 > m; m++) t.bst.R[m] = h.bst.R[m] - g.bst.R[m];
      for (m = 0; 4 > m; m++) t.bst.m[m] = h.bst.m[m] - g.bst.m[m];
      t.est = UPNG.quantize.estats(t.bst);
      h.left = g;
      h.right = t;
      e[f] = g;
      e.push(t);
    }
  }
  e.sort(function (a, b) {
    return b.bst.N - a.bst.N;
  });
  for (m = 0; m < e.length; m++) e[m].ind = m;
  return [k, e];
};
UPNG.quantize.getNearest = function (a, c, b, d, k) {
  if (null == a.left)
    return (a.tdst = UPNG.quantize.dist(a.est.q, c, b, d, k)), a;
  var e = UPNG.quantize.planeDst(a.est, c, b, d, k),
    h = a.left,
    f = a.right;
  0 < e && ((h = a.right), (f = a.left));
  a = UPNG.quantize.getNearest(h, c, b, d, k);
  if (a.tdst <= e * e) return a;
  c = UPNG.quantize.getNearest(f, c, b, d, k);
  return c.tdst < a.tdst ? c : a;
};
UPNG.quantize.planeDst = function (a, c, b, d, k) {
  var e = a.e;
  return e[0] * c + e[1] * b + e[2] * d + e[3] * k - a.eMq;
};
UPNG.quantize.dist = function (a, c, b, d, k) {
  c -= a[0];
  b -= a[1];
  d -= a[2];
  a = k - a[3];
  return c * c + b * b + d * d + a * a;
};
UPNG.quantize.splitPixels = function (a, c, b, d, k, e) {
  var h = UPNG.quantize.vecDot;
  for (d -= 4; b < d; ) {
    for (; h(a, b, k) <= e; ) b += 4;
    for (; h(a, d, k) > e; ) d -= 4;
    if (b >= d) break;
    var f = c[b >> 2];
    c[b >> 2] = c[d >> 2];
    c[d >> 2] = f;
    b += 4;
    d -= 4;
  }
  for (; h(a, b, k) > e; ) b -= 4;
  return b + 4;
};
UPNG.quantize.vecDot = function (a, c, b) {
  return a[c] * b[0] + a[c + 1] * b[1] + a[c + 2] * b[2] + a[c + 3] * b[3];
};
UPNG.quantize.stats = function (a, c, b) {
  for (
    var d = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      k = [0, 0, 0, 0],
      e = c;
    e < b;
    e += 4
  ) {
    var h = (1 / 255) * a[e],
      f = (1 / 255) * a[e + 1],
      m = (1 / 255) * a[e + 2],
      g = (1 / 255) * a[e + 3];
    k[0] += h;
    k[1] += f;
    k[2] += m;
    k[3] += g;
    d[0] += h * h;
    d[1] += h * f;
    d[2] += h * m;
    d[3] += h * g;
    d[5] += f * f;
    d[6] += f * m;
    d[7] += f * g;
    d[10] += m * m;
    d[11] += m * g;
    d[15] += g * g;
  }
  d[4] = d[1];
  d[8] = d[2];
  d[9] = d[6];
  d[12] = d[3];
  d[13] = d[7];
  d[14] = d[11];
  return { R: d, m: k, N: (b - c) >> 2 };
};
UPNG.quantize.estats = function (a) {
  var c = a.R,
    b = a.m,
    d = a.N;
  a = b[0];
  var k = b[1],
    e = b[2],
    h = b[3],
    f = 0 == d ? 0 : 1 / d;
  c = [
    c[0] - a * a * f,
    c[1] - a * k * f,
    c[2] - a * e * f,
    c[3] - a * h * f,
    c[4] - k * a * f,
    c[5] - k * k * f,
    c[6] - k * e * f,
    c[7] - k * h * f,
    c[8] - e * a * f,
    c[9] - e * k * f,
    c[10] - e * e * f,
    c[11] - e * h * f,
    c[12] - h * a * f,
    c[13] - h * k * f,
    c[14] - h * e * f,
    c[15] - h * h * f,
  ];
  b = UPNG.M4;
  var m = [0.5, 0.5, 0.5, 0.5],
    g = 0;
  if (0 != d)
    for (var t = 0; 10 > t; t++) {
      m = b.multVec(c, m);
      d = Math.sqrt(b.dot(m, m));
      m = b.sml(1 / d, m);
      if (1e-9 > Math.abs(d - g)) break;
      g = d;
    }
  a = [a * f, k * f, e * f, h * f];
  k = b.dot(b.sml(255, a), m);
  return {
    Cov: c,
    q: a,
    e: m,
    L: g,
    eMq255: k,
    eMq: b.dot(m, a),
    rgba:
      ((Math.round(255 * a[3]) << 24) |
        (Math.round(255 * a[2]) << 16) |
        (Math.round(255 * a[1]) << 8) |
        (Math.round(255 * a[0]) << 0)) >>>
      0,
  };
};
UPNG.M4 = {
  multVec: function (a, c) {
    return [
      a[0] * c[0] + a[1] * c[1] + a[2] * c[2] + a[3] * c[3],
      a[4] * c[0] + a[5] * c[1] + a[6] * c[2] + a[7] * c[3],
      a[8] * c[0] + a[9] * c[1] + a[10] * c[2] + a[11] * c[3],
      a[12] * c[0] + a[13] * c[1] + a[14] * c[2] + a[15] * c[3],
    ];
  },
  dot: function (a, c) {
    return a[0] * c[0] + a[1] * c[1] + a[2] * c[2] + a[3] * c[3];
  },
  sml: function (a, c) {
    return [a * c[0], a * c[1], a * c[2], a * c[3]];
  },
};
UPNG.encode.concatRGBA = function (a) {
  for (var c = 0, b = 0; b < a.length; b++) c += a[b].byteLength;
  c = new Uint8Array(c);
  var d = 0;
  for (b = 0; b < a.length; b++) {
    for (var k = new Uint8Array(a[b]), e = k.length, h = 0; h < e; h += 4) {
      var f = k[h],
        m = k[h + 1],
        g = k[h + 2],
        t = k[h + 3];
      0 == t && (f = m = g = 0);
      c[d + h] = f;
      c[d + h + 1] = m;
      c[d + h + 2] = g;
      c[d + h + 3] = t;
    }
    d += e;
  }
  return c.buffer;
};
