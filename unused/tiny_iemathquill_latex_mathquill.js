/* eslint-disable*/

var latex_mathquill = [
  {
    nom: "Symboles",
    items: [
      { hint: "alpha", value: "\\alpha" },
      { hint: "theta", value: "\\theta" },
      { hint: "tau", value: "\\tau" },
      { hint: "beta", value: "\\beta" },
      { hint: "vartheta", value: "\\vartheta" },
      { hint: "pi", value: "\\pi" },
      { hint: "upsilon", value: "\\upsilon" },
      { hint: "gamma", value: "\\gamma" },
      { hint: "varpi", value: "\\varpi" },
      { hint: "phi", value: "\\phi" },
      { hint: "delta", value: "\\delta" },
      { hint: "kappa", value: "\\kappa" },
      { hint: "rho", value: "\\rho" },
      { hint: "varphi", value: "\\varphi" },
      { hint: "epsilon", value: "\\epsilon" },
      { hint: "lambda", value: "\\lambda" },
      { hint: "varrho", value: "\\varrho" },
      { hint: "chi", value: "\\chi" },
      { hint: "varepsilon", value: "\\varepsilon" },
      { hint: "mu", value: "\\mu" },
      { hint: "sigma", value: "\\sigma" },
      { hint: "psi", value: "\\psi" },
      { hint: "zeta", value: "\\zeta" },
      { hint: "nu", value: "\\nu" },
      { hint: "varsigma", value: "\\varsigma" },
      { hint: "omega", value: "\\omega" },
      { hint: "eta", value: "\\eta" },
      { hint: "xi", value: "\\xi" },
      { hint: "Gamma", value: "\\Gamma" },
      { hint: "Lambda", value: "\\Lambda" },
      { hint: "Sigma", value: "\\Sigma" },
      { hint: "Psi", value: "\\Psi" },
      { hint: "Delta", value: "\\Delta" },
      { hint: "Xi", value: "\\Xi" },
      { hint: "Upsilon", value: "\\Upsilon" },
      { hint: "Omega", value: "\\Omega" },
      { hint: "Theta", value: "\\Theta" },
      { hint: "Pi", value: "\\Pi" },
      { hint: "Phi", value: "\\Phi" },
      { hint: "ldots", value: "\\ldots" },
      { hint: "cdots", value: "\\cdots" },
      { hint: "vdots", value: "\\vdots" },
      { hint: "ddots", value: "\\ddots" },
      { hint: "aleph", value: "\\aleph" },
      { hint: "prime", value: "\\prime" },
      { hint: "forall", value: "\\forall" },
      { hint: "infty", value: "\\infty" },
      { hint: "hbar", value: "\\hbar" },
      { hint: "emptyset", value: "\\emptyset" },
      { hint: "exists", value: "\\exists" },
      { hint: "nabla", value: "\\nabla" },
      { hint: "neg", value: "\\neg" },
      { hint: "Diamond", value: "\\diamond" },
      { hint: "surd", value: "\\surd" },
      { hint: "flat", value: "\\flat" },
      { hint: "triangle", value: "\\triangle" },
      { hint: "ell", value: "\\ell" },
      { hint: "top", value: "\\top" },
      { hint: "natural", value: "\\natural" },
      { hint: "clubsuit", value: "\\clubsuit" },
      { hint: "wp", value: "\\wp" },
      { hint: "bot", value: "\\bot" },
      { hint: "sharp", value: "\\sharp" },
      { hint: "diamondsuit", value: "\\diamondsuit" },
      { hint: "Re", value: "\\Re" },
      { hint: "backslash", value: "\\backslash" },
      { hint: "heartsuit", value: "\\heartsuit" },
      { hint: "Im", value: "\\Im" },
      { hint: "angle", value: "\\angle" },
      { hint: "partial", value: "\\partial" },
      { hint: "spadesuit", value: "\\spadesuit" },
      { hint: "bar{a}", value: "\\bar{a}" },
      { hint: "vec{a}", value: "\\vec{a}" },
    ],
  },
  {
    nom: "Operateurs",
    items: [
      { hint: "pm", value: "\\pm" },
      { hint: "cap", value: "\\cap" },
      { hint: "diamond", value: "\\diamond" },
      { hint: "oplus", value: "\\oplus" },
      { hint: "mp", value: "\\mp" },
      { hint: "cup", value: "\\cup" },
      { hint: "bigtriangleup", value: "\\bigtriangleup" },
      { hint: "ominus", value: "\\ominus" },
      { hint: "times", value: "\\times" },
      { hint: "uplus", value: "\\uplus" },
      { hint: "bigtriangledown", value: "\\bigtriangledown" },
      { hint: "otimes", value: "\\otimes" },
      { hint: "div", value: "\\div" },
      { hint: "sqcap", value: "\\sqcap" },
      { hint: "triangleleft", value: "\\triangleleft" },
      { hint: "oslash", value: "\\oslash" },
      { hint: "ast", value: "\\ast" },
      { hint: "sqcup", value: "\\sqcup" },
      { hint: "triangleright", value: "\\triangleright" },
      { hint: "odot", value: "\\odot" },
      { hint: "star", value: "\\star" },
      { hint: "vee", value: "\\vee" },
      { hint: "bigcirc", value: "\\bigcirc" },
      { hint: "circ", value: "\\circ" },
      { hint: "wedge", value: "\\wedge" },
      { hint: "dagger", value: "\\dagger" },
      { hint: "bullet", value: "\\bullet" },
      { hint: "setminus", value: "\\setminus" },
      { hint: "unlhd", value: "\\unlhd" },
      { hint: "ddagger", value: "\\ddagger" },
      { hint: "cdot", value: "\\cdot" },
      { hint: "wr", value: "\\wr" },
      { hint: "amalg", value: "\\amalg" },
    ],
  },
  {
    nom: "Relations",
    items: [
      { hint: "leq", value: "\\leq" },
      { hint: "geq", value: "\\geq" },
      { hint: "equiv", value: "\\equiv" },
      { hint: "models", value: "\\models" },
      { hint: "prec", value: "\\prec" },
      { hint: "succ", value: "\\succ" },
      { hint: "sim", value: "\\sim" },
      { hint: "perp", value: "\\perp" },
      { hint: "preceq", value: "\\preceq" },
      { hint: "succeq", value: "\\succeq" },
      { hint: "simeq", value: "\\simeq" },
      { hint: "mid", value: "\\mid" },
      { hint: "ll", value: "\\ll" },
      { hint: "gg", value: "\\gg" },
      { hint: "asymp", value: "\\asymp" },
      { hint: "parallel", value: "\\parallel" },
      { hint: "subset", value: "\\subset" },
      { hint: "supset", value: "\\supset" },
      { hint: "approx", value: "\\approx" },
      { hint: "bowtie", value: "\\bowtie" },
      { hint: "subseteq", value: "\\subseteq" },
      { hint: "supseteq", value: "\\supseteq" },
      { hint: "cong", value: "\\cong" },
      { hint: "sqsubset", value: "\\sqsubset" },
      { hint: "sqsupset", value: "\\sqsupset" },
      { hint: "neq", value: "\\neq" },
      { hint: "smile", value: "\\smile" },
      { hint: "sqsubseteq", value: "\\sqsubseteq" },
      { hint: "sqsupseteq", value: "\\sqsupseteq" },
      { hint: "doteq", value: "\\doteq" },
      { hint: "frown", value: "\\frown" },
      { hint: "in", value: "\\in" },
      { hint: "ni", value: "\\ni" },
      { hint: "propto", value: "\\propto" },
      { hint: "vdash", value: "\\vdash" },
      { hint: "dashv", value: "\\dashv" },
    ],
  },
  {
    nom: "Fleches",
    items: [
      { hint: "leftarrow", value: "\\leftarrow" },
      { hint: "longleftarrow", value: "\\longleftarrow" },
      { hint: "uparrow", value: "\\uparrow" },
      { hint: "Leftarrow", value: "\\Leftarrow" },
      { hint: "Longleftarrow", value: "\\Longleftarrow" },
      { hint: "Uparrow", value: "\\Uparrow" },
      { hint: "rightarrow", value: "\\rightarrow" },
      { hint: "longrightarrow", value: "\\longrightarrow" },
      { hint: "downarrow", value: "\\downarrow" },
      { hint: "Rightarrow", value: "\\Rightarrow" },
      { hint: "Longrightarrow", value: "\\Longrightarrow" },
      { hint: "Downarrow", value: "\\Downarrow" },
      { hint: "leftrightarrow", value: "\\leftrightarrow" },
      { hint: "longleftrightarrow", value: "\\longleftrightarrow" },
      { hint: "updownarrow", value: "\\updownarrow" },
      { hint: "Leftrightarrow", value: "\\Leftrightarrow" },
      { hint: "Longleftrightarrow", value: "\\Longleftrightarrow" },
      { hint: "Updownarrow", value: "\\Updownarrow" },
      { hint: "mapsto", value: "\\mapsto" },
      { hint: "nearrow", value: "\\nearrow" },
      { hint: "hookleftarrow", value: "\\hookleftarrow" },
      { hint: "hookrightarrow", value: "\\hookrightarrow" },
      { hint: "searrow", value: "\\searrow" },
      { hint: "leftharpoonup", value: "\\leftharpoonup" },
      { hint: "rightharpoonup", value: "\\rightharpoonup" },
      { hint: "swarrow", value: "\\swarrow" },
      { hint: "leftharpoondown", value: "\\leftharpoondown" },
      { hint: "rightharpoondown", value: "\\rightharpoondown" },
      { hint: "nwarrow", value: "\\nwarrow" },
    ],
  },
  {
    nom: "Divers",
    items: [
      { hint: "sum", value: "\\sum" },
      { hint: "bigcap", value: "\\bigcap" },
      { hint: "bigodot", value: "\\bigodot" },
      { hint: "prod", value: "\\prod" },
      { hint: "bigcup", value: "\\bigcup" },
      { hint: "bigotimes", value: "\\bigotimes" },
      { hint: "coprod", value: "\\coprod" },
      { hint: "bigsqcup", value: "\\bigsqcup" },
      { hint: "bigoplus", value: "\\bigoplus" },
      { hint: "int", value: "\\int" },
      { hint: "bigvee", value: "\\bigvee" },
      { hint: "biguplus", value: "\\biguplus" },
      { hint: "oint", value: "\\oint" },
      { hint: "bigwedge", value: "\\bigwedge" },
    ],
  },
  {
    nom: "Delimiteurs",
    items: [
      { hint: "uparrow", value: "\\uparrow" },
      { hint: "Uparrow", value: "\\Uparrow" },
      { hint: "downarrow", value: "\\downarrow" },
      { hint: "Downarrow", value: "\\Downarrow" },
      { hint: "updownarrow", value: "\\updownarrow" },
      { hint: "Updownarrow", value: "\\Updownarrow" },
      { hint: "lfloor", value: "\\lfloor" },
      { hint: "rfloor", value: "\\rfloor" },
      { hint: "lceil", value: "\\lceil" },
      { hint: "rceil", value: "\\rceil" },
      { hint: "backslash", value: "\\backslash" },
    ],
  },
  {
    nom: "Formules",
    items: [
      { hint: "overleftarrow{abc}", value: "\\overleftarrow{abc}" },
      { hint: "overrightarrow{abc}", value: "\\overrightarrow{abc}" },
      { hint: "overline{abc}", value: "\\overline{abc}" },
      { hint: "underline{abc}", value: "\\underline{abc}" },
      { hint: "sqrt{abc}", value: "\\sqrt{abc}" },
      { hint: "sqrt[n]{abc}", value: "\\sqrt[n]{abc}" },
      { hint: "frac{abc}{xyz}", value: "\\frac{abc}{xyz}" },
    ],
  },
];

if (!HTMLCanvasElement.prototype.toBlob) {
  Object.defineProperty(HTMLCanvasElement.prototype, "toBlob", {
    value: function (callback, type, quality) {
      var canvas = this;
      setTimeout(function () {
        var binStr = atob(canvas.toDataURL(type, quality).split(",")[1]),
          len = binStr.length,
          arr = new Uint8Array(len);

        for (var i = 0; i < len; i++) {
          arr[i] = binStr.charCodeAt(i);
        }

        callback(new Blob([arr], { type: type || "image/png" }));
      });
    },
  });
}

/* eslint-enable*/
